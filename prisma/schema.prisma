generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // User preferences
  preferences UserPreferences?

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Article Model
model Article {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  link            String   @unique
  content         String   // Entire article text
  shortSummary    String   // Short summary of the article
  tags            String[] // Array of tags
  vectorEmbedding Float[]  // Vector embeddings for similarity search
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("articles")
  @@index([tags])
}

// Tags Model - Master list of all available tags
model Tag {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique // Tag name (e.g., "AI", "Technology")
  createdBy   String?  @db.ObjectId // User who created this tag (optional)
  usageCount  Int      @default(0) // How many times this tag is used
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tags")
}

// User Preferences Model
model UserPreferences {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @unique @db.ObjectId
  preferredTags    String[] // Tags that user is interested in (references Tag.name)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}