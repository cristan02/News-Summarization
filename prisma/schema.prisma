generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // User preferences - moved directly into User table
  preferredTags String[] @default([]) // Tags that user is interested in

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Article Model
model Article {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  link            String   @unique
  content         String   // Entire article text
  summary         String   // Summary of the article (renamed from shortSummary)
  tag             String   // Single tag for the article (matches a tag from Tag model)
  source          String?  // News source (e.g., "NewsAPI", "Guardian API")
  author          String?  // Article author
  publishedAt     DateTime? // Original publication date
  imageUrl        String?  // Article image URL
  // Removed vectorEmbedding; embeddings now stored per chunk in Chunk collection
  chunks          ArticleChunk[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("articles")
  @@index([tag])
  @@index([publishedAt])
}

// Tags Model - Master list of all available tags
model Tag {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique // Tag name (e.g., "AI", "Technology")
  createdBy   String?  @db.ObjectId // User who created this tag (optional)
  usageCount  Int      @default(0) // How many times this tag is used
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tags")
}

// Chunk Model - stores segmented article text and per-chunk embeddings for RAG
model ArticleChunk {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  articleId       String   @db.ObjectId
  chunkText       String   // Text content of this chunk
  vectorEmbedding Float[]  @default([]) // Embedding vector for similarity search
  chunkIndex      Int      // Order of the chunk within the article
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  article         Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("article_chunks")
  @@index([articleId])
  @@index([chunkIndex])
}